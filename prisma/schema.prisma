generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isBusinessOwner Boolean   @default(false)
  isVerified      Boolean   @default(false)
  accounts        Account[]
  events          Event[]   @relation("EventCreator")
  likes           Like[]
  sessions        Session[]
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  date        DateTime
  url         String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  creator     User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  likes       Like[]

  @@index([creatorId])
  @@index([categoryId])
}

model Category {
  id     String  @id @default(cuid())
  name   String  @unique
  events Event[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
